import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const tasks = trpc.task.getAll.useQuery();
  const taskMutation = trpc.task.create.useMutation({
    onSuccess: () => {
      tasks.refetch();
    }
  });
  const completeMutation = trpc.task.completeTask.useMutation({
    onSuccess: () => {
      tasks.refetch();
    }
  })

  return (
    <>
      <Head>
        <title>Demo TRPC</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex min-h-screen flex-col items-center p-4">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          Demo <span className="text-purple-300">TRPC</span>
        </h1>
        <form onSubmit={(event) => {
          event.preventDefault();
          const formData = new FormData(event.target as HTMLFormElement);
          const text = formData.get('text') as string;
          taskMutation.mutate({ text });
        }}>
          <input
            className="border-2 border-gray-300 p-2 rounded-md"
            type="text"
            placeholder="Enter your text"
            name="text"
          />
          <button className="bg-purple-300 p-2 rounded-md" type="submit">Submit</button>
        </form>
        <ul className="pt-10 flex flex-col gap-2">
          {tasks.data?.map((task) => (
            <li key={task.id} className="flex gap-1 items-center">
              {task.title}
              {task.status === 'done'? (
                <span className="text-green-500">ðŸŽ‰</span>
              ): (
                <button className="bg-purple-300 p-2 rounded-md" onClick={() => {
                  completeMutation.mutate({ id: task.id })
                }}>
                  âœ…
                </button>
              )}
            </li>
          ))}
        </ul>
      </main>
    </>
  );
};

export default Home;

type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};

const TechnologyCard = ({
  name,
  description,
  documentation,
}: TechnologyCardProps) => {
  return (
    <section className="flex flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <a
        className="m-auto mt-3 w-fit text-sm text-violet-500 underline decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </a>
    </section>
  );
};
